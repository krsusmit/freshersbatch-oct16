Assignment - 1

use mongo_practice
Insert Documents-------------
db.movies.insertMany([{title:'Fight Club',writer:'Chuck Palahniuko',year:1999,actors:['Brad Pitt','Edward Norton']},{title:'Pulp Fiction',writer:'Quentin Tarantino',year:1994,actors:['John Travolta','Uma Thurman']},{title:'Inglorious Basterds',writer:'Quentin Tarantino',year:2009,actors:['Brad Pitt','Diane Kruger','Eli Roth']},{title:'The Hobbit: An Unexpected Journey',writer:'J.R.R. Tolkein',year:2012,franchise:'The Hobbit'},{title:'The Hobbit: The Desolation of Smaug',writer:'J.R.R. Tolkein',year:2013,franchise:'The Hobbit'},{title:'The Hobbit: The Battle of the Five Armies',writer:'J.R.R. Tolkein',year:2012,franchise:'The Hobbit',synopsis:'Bilbo and Company are forced to engage in a war against an array of combatants'},{title:'Pee Wee Hermans Big Adventure'},{title: 'Avatar'}])
1. db.movies.find()
2. db.movies.find({writer:'Quentin Tarantino'})
3. db.movies.find({actors:'Brad Pitt'})
4. db.movies.find({franchise:'The Hobbit'})
5. db.movies.find({year:{$gte:1990,$lt:2000}})
6. db.movies.find({$or:[{year:{$lt:2000}},{year:{$gt:2010}}]})

Update Documents--------------------
1. db.movies.update({title:'The Hobbit: An Unexpected Journey'},{$set:{synopsis:"A reluctant hobbit, Bilbo Baggins, sets out to the Lonely Mountain with a spirited group of dwarves"}})
2. db.movies.update({title:'The Hobbit: The Desolation of Smaug'},{$set:{synopsis:"The dwarves, along with Bilbo Baggins and Gandalf the Grey, continue their quest"}})
3. db.movies.update({title: 'Pulp Fiction'},{$push:{actors:"Samuel L. Jackson"}})

Text Search----------------------
1. db.movies.find({synopsis: /Bilbo/i})
2. db.movies.find({synopsis: /Gandalf/i})
3. db.movies.find({$and:[{synopsis: /Bilbo/},{synopsis:{$not: /Gandalf/}}]})
4. db.movies.find({$or:[{synopsis: /dwarves/},{synopsis: /hobbit/}]})
5. db.movies.find({$and:[{synopsis: /gold/},{synopsis: /dragon/}]})

Delete Documents------------------
1. db.movies.remove({title:"Pee Wee Herman's Big Adventure"})
2. db.movies.remove({title:"Avatar"})

Quering related collections
1. db.users.find({})
2. db.posts.find({})
3. db.posts.find({username: 'GoodGuyGreg'})
4. db.posts.find({username: 'ScumbagSteve'})
5. db.comments.find({})
6. db.comments.find({username: 'GoodGuyGreg'})
7. db.comments.find({username: 'ScumbagSteve'})
8. db.comments.find({post: db.posts.findOne({title: "Reports a bug in your code"})._id})